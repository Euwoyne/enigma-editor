
#
# These are the Error Messages issued by the "api.CodeAnalyser" class.
#

IndexOfNonTable                   = attempt to index '%s' (a %s value) 
IndexOfNonTable.EASY              = attempt to index '%s' (a %s value for easy mode) 
IndexOfNonTable.DIFFICULT         = attempt to index '%s' (a %s value for difficult mode) 

MissingWoCall                     = no world was created (missing call to 'wo()' or 'createWorld()')
MissingWoCall.EASY                = no world was created for easy mode (missing call to 'wo()' or 'createWorld()')
MissingWoCall.DIFFICULT           = no world was created for difficult mode (missing call to 'wo()' or 'createWorld()')

IllegalWoCallArgumentCount        = illegal number of arguments to 'wo()' (expected two or three, got %s)
IllegalWoDefaultkey               = the 'defaultkey' argument of 'wo()' must be a string (got a %s value)
IllegalWoDefaultkey.EASY          = the 'defaultkey' argument of 'wo()' must be a string (got a %s value for easy mode)
IllegalWoDefaultkey.DIFFICULT     = the 'defaultkey' argument of 'wo()' must be a string (got a %s value for difficult mode)
IllegalWoWidth                    = the 'width' argument of 'wo()' must be a number (got a %s value)
IllegalWoWidth.EASY               = the 'width' argument of 'wo()' must be a number (got a %s value for easy mode)
IllegalWoWidth.DIFFICULT          = the 'width' argument of 'wo()' must be a number (got a %s value for difficult mode)
IllegalWoHeight                   = the 'height' argument of 'wo()' must be a number (got a %s value)
IllegalWoHeight.EASY              = the 'height' argument of 'wo()' must be a number (got a %s value for easy mode)
IllegalWoHeight.DIFFICULT         = the 'height' argument of 'wo()' must be a number (got a %s value for difficult mode)
IllegalWoMap                      = the 'map' argument of 'wo()' must be a table (got a %s value)
IllegalWoMap.EASY                 = the 'map' argument of 'wo()' must be a table (got a %s value for easy mode)
IllegalWoMap.DIFFICULT            = the 'map' argument of 'wo()' must be a table (got a %s value for difficult mode)
IllegalWoMapEntry                 = got a %s value for line %s of the 'map' argument of 'wo()' (expected a string)
IllegalWoMapEntry.EASY            = got a %s value for line %s of the 'map' argument of 'wo()' in easy mode (expected a string)
IllegalWoMapEntry.DIFFICULT       = got a %s value for line %s of the 'map' argument of 'wo()' in difficult mode (expected a string)
IllegalWoMapWidth                 = line %s of the 'map' argument of 'wo()' has odd width
IllegalWoMapWidth.EASY            = line %s of the 'map' argument of 'wo()' has odd width (in easy mode)
IllegalWoMapWidth.DIFFICULT       = line %s of the 'map' argument of 'wo()' has odd width (in difficult mode)

IllegalSubresolver                = expected a resolver (got %s value)
IllegalSubresolver.EASY           = expected a resolver (got %s value for easy mode)
IllegalSubresolver.DIFFICULT      = expected a resolver (got %s value for difficult mode)

IllegalTiArgumentCount            = expected tile repository (got nothing) [this should never occur]
IllegalTileRedefinition           = redefinition of tile '%s'
IllegalTileRepo                   = illegal tile repository (expected a table, got %s value)
IllegalTileRepo.EASY              = illegal tile repository (expected a table, got %s value for easy mode)
IllegalTileRepo.DIFFICULT         = illegal tile repository (expected a table, got %s value for difficult mode)
IllegalTile                       = illegal object as tile '%s' (a %s value)
IllegalTile.EASY                  = illegal object as tile '%s' for easy mode (a %s value)
IllegalTile.DIFFICULT             = illegal object as tile '%s' for difficult mode (a %s value)
IllegalTilePart                   = illegal object as tile part (a %s value)
IllegalTilePart.EASY              = illegal object as tile part for easy mode (a %s value)
IllegalTilePart.DIFFICULT         = illegal object as tile part for difficult mode (a %s value)

IllegalComposerArgumentCount      = resolver 'res.composer' expects at least one argument (a subresolver)
IllegalComposerSequence           = sequence argument for resolver 'res.composer' must be a string (got %s value)
IllegalComposerSequence.EASY      = sequence argument for resolver 'res.composer' must be a string (got %s value for easy mode)
IllegalComposerSequence.DIFFICULT = sequence argument for resolver 'res.composer' must be a string (got %s value for difficult mode)

IllegalAutotileArgumentCount      = resolver 'res.autotile' expects at least two arguments (a subresolver and at least one rule)
IllegalAutotileRule               = rule for resolver 'res.autotile' has to be a table (got %s value)
IllegalAutotileRuleFormat         = rule for resolver 'res.autotile' must have at least two elements
IllegalAutotileRuleValue          = a rule for resolver 'res.autotile' contains an illegal argument (a %s value) 
IllegalAutotileRulePrefix         = a rule for resolver 'res.autotile' contains an illegal prefix (a %s value) 
IllegalAutotileRuleRange          = a rule for resolver 'res.autotile' contains an illegal range 
IllegalAutotileRuleTemplate       = a rule for resolver 'res.autotile' contains an illegal template key (a %s value) 
IllegalAutotileRuleOffset         = a rule for resolver 'res.autotile' contains an illegal offset (a %s value) 

IllegalPuzzleArgumentCount        = resolver 'res.puzzle' expects at least one argument (a subresolver)
IllegalPuzzleRule                 = rule for resolver 'res.puzzle' has to be a string (got %s value)

IllegalClusterId                  = illegal value for 'cluster' attribute in tile '%s'
IllegalClusterConnections         = illegal value for 'connections' attribute in tile '%s'

