/* The following code was generated by JFlex 1.6.0 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Based on "lua.flex" from the package "jsyntaxpane-0.9.5-b29" by Ayman Al-Sairafi
 *
 * Modifications by Dominik Lehmann:
 *   Modified 01/02/2015: Added Lua5 standard library functions and types
 */

package jsyntaxpane.lexers;

import jsyntaxpane.Token;
import jsyntaxpane.TokenType;
import jsyntaxpane.lexers.DefaultJFlexLexer;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>src/jsyntaxpane/lexers/lua5.flex</tt>
 */
public final class Lua5Lexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING1 = 2;
  public static final int STRING2 = 4;
  public static final int BLOCKCOMMENT = 6;
  public static final int COMMENT = 8;
  public static final int LINECOMMENT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\62\1\63\1\1\16\10\4\0\1\3\1\0"+
    "\1\21\1\53\1\7\1\53\1\0\1\20\1\56\1\57\1\53\1\52"+
    "\1\53\1\17\1\15\1\53\1\13\11\11\1\53\1\53\1\55\1\5"+
    "\1\55\2\0\4\12\1\16\1\12\24\7\1\4\1\22\1\6\1\53"+
    "\1\7\1\0\1\26\1\23\1\35\1\43\1\25\1\33\1\45\1\42"+
    "\1\32\1\7\1\27\1\30\1\47\1\40\1\34\1\44\1\50\1\24"+
    "\1\31\1\36\1\37\1\46\1\41\1\14\1\51\1\7\1\60\1\0"+
    "\1\61\1\54\6\10\1\64\32\10\2\0\4\7\4\0\1\7\2\0"+
    "\1\10\7\0\1\7\4\0\1\7\5\0\27\7\1\0\37\7\1\0"+
    "\u01ca\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7\21\0"+
    "\160\10\5\7\1\0\2\7\2\0\4\7\10\0\1\7\1\0\3\7"+
    "\1\0\1\7\1\0\24\7\1\0\123\7\1\0\213\7\1\0\5\10"+
    "\2\0\236\7\11\0\46\7\2\0\1\7\7\0\47\7\11\0\55\10"+
    "\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0\33\7"+
    "\5\0\3\7\15\0\4\10\7\0\1\7\4\0\13\10\5\0\53\7"+
    "\37\10\4\0\2\7\1\10\143\7\1\0\1\7\10\10\1\0\6\10"+
    "\2\7\2\10\1\0\4\10\2\7\12\10\3\7\2\0\1\7\17\0"+
    "\1\10\1\7\1\10\36\7\33\10\2\0\131\7\13\10\1\7\16\0"+
    "\12\10\41\7\11\10\2\7\4\0\1\7\5\0\26\7\4\10\1\7"+
    "\11\10\1\7\3\10\1\7\5\10\22\0\31\7\3\10\244\0\4\10"+
    "\66\7\3\10\1\7\22\10\1\7\7\10\12\7\2\10\2\0\12\10"+
    "\1\0\7\7\1\0\7\7\1\0\3\10\1\0\10\7\2\0\2\7"+
    "\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7\2\0\1\10"+
    "\1\7\7\10\2\0\2\10\2\0\3\10\1\7\10\0\1\10\4\0"+
    "\2\7\1\0\3\7\2\10\2\0\12\10\4\7\7\0\1\7\5\0"+
    "\3\10\1\0\6\7\4\0\2\7\2\0\26\7\1\0\7\7\1\0"+
    "\2\7\1\0\2\7\1\0\2\7\2\0\1\10\1\0\5\10\4\0"+
    "\2\10\2\0\3\10\3\0\1\10\7\0\4\7\1\0\1\7\7\0"+
    "\14\10\3\7\1\10\13\0\3\10\1\0\11\7\1\0\3\7\1\0"+
    "\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7"+
    "\10\10\1\0\3\10\1\0\3\10\2\0\1\7\17\0\2\7\2\10"+
    "\2\0\12\10\1\0\1\7\17\0\3\10\1\0\10\7\2\0\2\7"+
    "\2\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10"+
    "\1\7\7\10\2\0\2\10\2\0\3\10\10\0\2\10\4\0\2\7"+
    "\1\0\3\7\2\10\2\0\12\10\1\0\1\7\20\0\1\10\1\7"+
    "\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7\4\0\5\10"+
    "\3\0\3\10\1\0\4\10\2\0\1\7\6\0\1\10\16\0\12\10"+
    "\11\0\1\7\7\0\3\10\1\0\10\7\1\0\3\7\1\0\27\7"+
    "\1\0\12\7\1\0\5\7\3\0\1\7\7\10\1\0\3\10\1\0"+
    "\4\10\7\0\2\10\1\0\2\7\6\0\2\7\2\10\2\0\12\10"+
    "\22\0\2\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7"+
    "\1\0\5\7\2\0\1\10\1\7\7\10\1\0\3\10\1\0\4\10"+
    "\7\0\2\10\7\0\1\7\1\0\2\7\2\10\2\0\12\10\1\0"+
    "\2\7\17\0\2\10\1\0\10\7\1\0\3\7\1\0\51\7\2\0"+
    "\1\7\7\10\1\0\3\10\1\0\4\10\1\7\10\0\1\10\10\0"+
    "\2\7\2\10\2\0\12\10\12\0\6\7\2\0\2\10\1\0\22\7"+
    "\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7\3\0\1\10"+
    "\4\0\6\10\1\0\1\10\1\0\10\10\22\0\2\10\15\0\60\7"+
    "\1\10\2\7\7\10\4\0\10\7\10\10\1\0\12\10\47\0\2\7"+
    "\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7"+
    "\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7"+
    "\1\0\4\7\1\10\2\7\6\10\1\0\2\10\1\7\2\0\5\7"+
    "\1\0\1\7\1\0\6\10\2\0\12\10\2\0\2\7\42\0\1\7"+
    "\27\0\2\10\6\0\12\10\13\0\1\10\1\0\1\10\1\0\1\10"+
    "\4\0\2\10\10\7\1\0\44\7\4\0\24\10\1\0\2\10\5\7"+
    "\13\10\1\0\44\10\11\0\1\10\71\0\53\7\24\10\1\7\12\10"+
    "\6\0\6\7\4\10\4\7\3\10\1\7\3\10\2\7\7\10\3\7"+
    "\4\10\15\7\14\10\1\7\17\10\2\0\46\7\12\0\53\7\1\0"+
    "\1\7\3\0\u0149\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0"+
    "\4\7\2\0\51\7\1\0\4\7\2\0\41\7\1\0\4\7\2\0"+
    "\7\7\1\0\1\7\1\0\4\7\2\0\17\7\1\0\71\7\1\0"+
    "\4\7\2\0\103\7\2\0\3\10\40\0\20\7\20\0\125\7\14\0"+
    "\u026c\7\2\0\21\7\1\0\32\7\5\0\113\7\3\0\3\7\17\0"+
    "\15\7\1\0\4\7\3\10\13\0\22\7\3\10\13\0\22\7\2\10"+
    "\14\0\15\7\1\0\3\7\1\0\2\10\14\0\64\7\40\10\3\0"+
    "\1\7\3\0\2\7\1\10\2\0\12\10\41\0\3\10\2\0\12\10"+
    "\6\0\130\7\10\0\51\7\1\10\1\7\5\0\106\7\12\0\35\7"+
    "\3\0\14\10\4\0\14\10\12\0\12\10\36\7\2\0\5\7\13\0"+
    "\54\7\4\0\21\10\7\7\2\10\6\0\12\10\46\0\27\7\5\10"+
    "\4\0\65\7\12\10\1\0\35\10\2\0\13\10\6\0\12\10\15\0"+
    "\1\7\130\0\5\10\57\7\21\10\7\7\4\0\12\10\21\0\11\10"+
    "\14\0\3\10\36\7\12\10\3\0\2\7\12\10\6\0\46\7\16\10"+
    "\14\0\44\7\24\10\10\0\12\10\3\0\3\7\12\10\44\7\122\0"+
    "\3\10\1\0\25\10\4\7\1\10\4\7\1\10\15\0\300\7\47\10"+
    "\25\0\4\10\u0116\7\2\0\6\7\2\0\46\7\2\0\6\7\2\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\37\7\2\0"+
    "\65\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0"+
    "\4\7\2\0\6\7\4\0\15\7\5\0\3\7\1\0\7\7\16\0"+
    "\5\10\30\0\1\62\1\62\5\10\20\0\2\7\23\0\1\7\13\0"+
    "\5\10\5\0\6\10\1\0\1\7\15\0\1\7\20\0\15\7\3\0"+
    "\32\7\26\0\15\10\4\0\1\10\3\0\14\10\21\0\1\7\4\0"+
    "\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0"+
    "\5\7\4\0\1\7\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0"+
    "\205\7\6\0\4\7\3\10\16\0\46\7\12\0\66\7\11\0\1\7"+
    "\17\0\1\10\27\7\11\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\40\10\57\0\1\7\u01d5\0\3\7\31\0\11\7\6\10\1\0\5\7"+
    "\2\0\5\7\4\0\126\7\2\0\2\10\2\0\3\7\1\0\132\7"+
    "\1\0\4\7\5\0\51\7\3\0\136\7\21\0\33\7\65\0\20\7"+
    "\u0200\0\u19b6\7\112\0\u51cc\7\64\0\u048d\7\103\0\56\7\2\0\u010d\7"+
    "\3\0\20\7\12\10\2\7\24\0\57\7\1\10\14\0\2\10\1\0"+
    "\31\7\10\0\120\7\2\10\45\0\11\7\2\0\147\7\2\0\4\7"+
    "\1\0\2\7\16\0\12\7\120\0\10\7\1\10\3\7\1\10\4\7"+
    "\1\10\27\7\5\10\20\0\1\7\7\0\64\7\14\0\2\10\62\7"+
    "\21\10\13\0\12\10\6\0\22\10\6\7\3\0\1\7\4\0\12\10"+
    "\34\7\10\10\2\0\27\7\15\10\14\0\35\7\3\0\4\10\57\7"+
    "\16\10\16\0\1\7\12\10\46\0\51\7\16\10\11\0\3\7\1\10"+
    "\10\7\2\10\2\0\12\10\6\0\27\7\3\0\1\7\1\10\4\0"+
    "\60\7\1\10\1\7\3\10\2\7\2\10\5\7\2\10\1\7\1\10"+
    "\1\7\30\0\3\7\43\0\6\7\2\0\6\7\2\0\6\7\11\0"+
    "\7\7\1\0\7\7\221\0\43\7\10\10\1\0\2\10\2\0\12\10"+
    "\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u012e\7\2\0\76\7"+
    "\2\0\152\7\46\0\7\7\14\0\5\7\5\0\1\7\1\10\12\7"+
    "\1\0\15\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7"+
    "\3\0\20\10\20\0\7\10\14\0\2\7\30\0\3\7\31\0\1\7"+
    "\6\0\5\7\1\0\207\7\2\0\1\10\4\0\1\7\13\0\12\10"+
    "\7\0\32\7\4\0\1\7\1\0\32\7\13\0\131\7\3\0\6\7"+
    "\2\0\6\7\2\0\6\7\2\0\3\7\3\0\2\7\3\0\2\7"+
    "\22\0\3\10\4\0\14\7\1\0\32\7\1\0\23\7\1\0\2\7"+
    "\1\0\17\7\2\0\16\7\42\0\173\7\105\0\65\7\210\0\1\10"+
    "\202\0\35\7\3\0\61\7\57\0\37\7\21\0\33\7\65\0\36\7"+
    "\2\0\44\7\4\0\10\7\1\0\5\7\52\0\236\7\2\0\12\10"+
    "\u0356\0\6\7\2\0\1\7\1\0\54\7\1\0\2\7\3\0\1\7"+
    "\2\0\27\7\252\0\26\7\12\0\32\7\306\0\1\7\3\10\1\0"+
    "\2\10\5\0\4\10\4\7\1\0\3\7\1\0\33\7\4\0\3\10"+
    "\4\0\1\10\40\0\35\7\203\0\66\7\12\0\26\7\12\0\23\7"+
    "\215\0\111\7\u03b7\0\3\10\65\7\17\10\37\0\12\10\20\0\3\10"+
    "\55\7\13\10\2\0\1\10\u0f42\0\u036f\7\221\0\143\7\u0b9d\0\u042f\7"+
    "\u33d1\0\u0239\7\u45c7\0\2\7\u2163\0\5\10\3\0\26\10\2\0\7\10"+
    "\36\0\4\10\224\0\3\10\u01bb\0\125\7\1\0\107\7\1\0\2\7"+
    "\2\0\1\7\2\0\2\7\2\0\4\7\1\0\14\7\1\0\1\7"+
    "\1\0\7\7\1\0\101\7\1\0\4\7\2\0\10\7\1\0\7\7"+
    "\1\0\34\7\1\0\4\7\1\0\5\7\1\0\1\7\3\0\7\7"+
    "\1\0\u0154\7\2\0\31\7\1\0\31\7\1\0\37\7\1\0\31\7"+
    "\1\0\37\7\1\0\31\7\1\0\37\7\1\0\31\7\1\0\37\7"+
    "\1\0\31\7\1\0\10\7\2\0\62\10\u2800\0\ua6d7\7\51\0\u1035\7"+
    "\13\0\336\7\u3fe2\0\u021e\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\10\36\0\140\10\200\0\360\10\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\3\1\1\2\1\3\1\4\1\5\2\6\1\5"+
    "\2\3\1\7\1\10\22\5\1\3\1\1\1\11\1\12"+
    "\1\13\1\14\1\15\2\16\1\17\1\1\1\15\1\20"+
    "\1\21\2\15\1\21\1\22\2\23\1\22\1\24\2\25"+
    "\1\26\1\0\1\6\2\0\1\5\1\3\1\27\13\5"+
    "\1\30\1\31\20\5\1\32\7\5\1\33\1\0\1\34"+
    "\1\35\1\0\1\6\1\0\1\6\7\5\1\36\24\5"+
    "\1\37\21\5\1\30\1\5\1\40\13\5\1\32\1\40"+
    "\27\5\1\41\4\5\1\42\11\5\1\43\13\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u013e\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u013e\0\u013e\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u013e\0\u0212"+
    "\0\u013e\0\u013e\0\u013e\0\u013e\0\u073f\0\u0774\0\u013e\0\u013e"+
    "\0\u07a9\0\u07de\0\u013e\0\u013e\0\u0813\0\u013e\0\u0848\0\u013e"+
    "\0\u087d\0\u013e\0\u08b2\0\u013e\0\u08e7\0\u013e\0\u013e\0\u01dd"+
    "\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u013e\0\u0a25\0\u0a5a"+
    "\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02"+
    "\0\u0c37\0\u0247\0\u0247\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40"+
    "\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8"+
    "\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090"+
    "\0\u10c5\0\u10fa\0\u112f\0\u013e\0\u0848\0\u013e\0\u013e\0\u08b2"+
    "\0\u1164\0\u1164\0\u0986\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d"+
    "\0\u12a2\0\u12d7\0\u0247\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0"+
    "\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588"+
    "\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u0247"+
    "\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3"+
    "\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b"+
    "\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3"+
    "\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u0247"+
    "\0\u0247\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9"+
    "\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081"+
    "\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229"+
    "\0\u0247\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u0247\0\u2332\0\u2367"+
    "\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u0247"+
    "\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682"+
    "\0\u26b7\0\u26ec\0\u2721";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\7\1\11\1\12\1\13\1\14\1\15"+
    "\1\7\1\16\1\15\1\17\1\20\1\21\1\15\1\22"+
    "\1\23\1\24\1\7\1\25\1\26\1\27\1\30\1\15"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\15\1\43\1\44\1\45\1\15\1\46"+
    "\2\15\2\47\1\50\1\13\1\51\1\52\1\53\1\54"+
    "\1\7\1\11\1\7\1\55\1\56\1\57\15\55\1\60"+
    "\1\55\1\61\42\55\1\62\1\56\1\57\16\62\1\63"+
    "\1\61\42\62\1\64\1\65\1\66\3\64\1\67\53\64"+
    "\3\7\1\70\1\71\1\72\1\70\1\73\55\70\3\7"+
    "\1\74\1\75\1\76\57\74\3\7\67\0\1\7\65\0"+
    "\1\11\57\0\1\11\5\0\1\77\1\100\64\0\1\47"+
    "\66\0\6\15\1\0\1\15\4\0\27\15\12\0\1\15"+
    "\11\0\1\16\1\0\1\16\1\0\1\101\1\102\6\0"+
    "\1\102\50\0\1\16\1\0\1\16\1\103\1\101\1\102"+
    "\6\0\1\102\46\0\6\15\1\0\1\15\4\0\21\15"+
    "\1\104\5\15\12\0\1\15\11\0\1\101\1\0\1\101"+
    "\1\0\1\105\66\0\1\106\54\0\6\15\1\0\1\15"+
    "\4\0\1\15\1\107\25\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\2\15\1\110\1\111\23\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\1\15\1\112"+
    "\3\15\1\113\7\15\1\114\11\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\6\15\1\115\6\15\1\116"+
    "\11\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\11\15\1\117\15\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\2\15\1\120\10\15\1\121\13\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\10\15\1\122"+
    "\1\123\3\15\1\122\3\15\1\124\5\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\3\15\1\125\5\15"+
    "\1\126\2\15\1\127\12\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\1\15\1\122\4\15\1\123\20\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\11\15"+
    "\1\130\15\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\1\15\1\131\1\15\1\132\5\15\1\133\5\15"+
    "\1\134\6\15\1\135\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\15\15\1\136\11\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\2\15\1\137\4\15\1\140"+
    "\1\15\1\141\15\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\17\15\1\142\7\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\2\15\1\143\6\15\1\144"+
    "\15\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\1\15\1\145\1\15\1\146\6\15\1\147\14\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\2\15\1\150"+
    "\7\15\1\151\14\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\3\15\1\152\5\15\1\153\15\15\12\0"+
    "\1\15\1\55\2\0\15\55\1\0\1\55\1\0\42\55"+
    "\2\0\1\57\62\0\1\154\2\0\57\154\3\0\1\62"+
    "\2\0\16\62\2\0\42\62\2\0\1\66\67\0\1\155"+
    "\1\156\60\0\1\72\66\0\1\157\1\160\61\0\1\76"+
    "\73\0\1\101\1\0\1\101\2\0\1\102\6\0\1\102"+
    "\50\0\1\161\1\0\1\161\3\0\1\162\32\0\1\162"+
    "\23\0\3\163\2\0\1\163\4\0\1\163\1\0\2\163"+
    "\4\0\1\163\1\0\1\163\5\0\1\163\30\0\6\15"+
    "\1\0\1\15\4\0\12\15\1\147\14\15\12\0\1\15"+
    "\15\0\1\47\56\0\6\15\1\0\1\15\4\0\2\15"+
    "\1\164\24\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\13\15\1\165\5\15\1\166\3\15\1\167\1\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\16\15"+
    "\1\170\10\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\1\15\1\171\25\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\6\15\1\172\20\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\20\15\1\173\6\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\6\15"+
    "\1\174\20\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\20\15\1\122\6\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\3\15\1\175\6\15\1\176\14\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\5\15"+
    "\1\177\5\15\1\200\13\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\1\15\1\201\25\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\3\15\1\202\23\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\5\15"+
    "\1\203\21\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\1\15\1\122\25\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\15\15\1\204\11\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\1\15\1\205\3\15"+
    "\1\206\21\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\14\15\1\207\12\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\1\210\26\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\6\15\1\211\6\15\1\212"+
    "\11\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\2\15\1\213\24\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\21\15\1\214\5\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\13\15\1\215\5\15\1\216"+
    "\5\15\12\0\1\15\7\0\5\15\1\217\1\0\1\15"+
    "\4\0\27\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\5\15\1\220\21\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\13\15\1\122\13\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\7\15\1\221\17\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\1\222"+
    "\26\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\10\15\1\223\16\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\7\15\1\224\17\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\7\15\1\225\2\15\1\226"+
    "\14\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\3\15\1\227\23\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\13\15\1\200\13\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\7\15\1\230\17\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\13\15\1\231"+
    "\13\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\20\15\1\232\6\15\12\0\1\15\11\0\1\161\1\0"+
    "\1\161\60\0\6\15\1\0\1\15\4\0\3\15\1\233"+
    "\23\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\14\15\1\234\12\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\2\15\1\235\24\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\14\15\1\236\12\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\2\15\1\237"+
    "\3\15\1\240\13\15\1\240\4\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\11\15\1\241\15\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\2\15\1\242"+
    "\24\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\2\15\1\243\24\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\20\15\1\244\6\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\3\15\1\245\23\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\2\15\1\246"+
    "\24\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\10\15\1\247\13\15\1\250\2\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\7\15\1\251\17\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\7\15\1\225"+
    "\17\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\6\15\1\207\20\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\12\15\1\252\14\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\11\15\1\253\15\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\5\15\1\254"+
    "\21\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\2\15\1\220\24\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\5\15\1\255\21\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\13\15\1\256\13\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\14\15\1\257"+
    "\12\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\15\15\1\260\11\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\2\15\1\261\24\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\7\15\1\262\17\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\3\15\1\263"+
    "\23\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\13\15\1\261\13\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\5\15\1\264\21\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\14\15\1\265\12\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\7\15\1\266"+
    "\17\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\15\15\1\217\11\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\1\15\1\267\25\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\4\15\1\270\22\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\5\15\1\271"+
    "\21\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\15\15\1\272\11\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\17\15\1\123\7\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\14\15\1\273\12\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\4\15\1\122"+
    "\22\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\1\15\1\274\25\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\3\15\1\275\23\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\7\15\1\276\17\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\25\15\1\277"+
    "\1\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\2\15\1\217\24\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\1\15\1\261\25\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\7\15\1\300\17\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\1\15\1\217"+
    "\25\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\5\15\1\301\1\211\1\15\1\223\16\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\5\15\1\122\21\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\12\15"+
    "\1\217\14\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\2\15\1\302\24\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\2\15\1\303\24\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\15\15\1\265\11\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\13\15"+
    "\1\304\13\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\14\15\1\305\12\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\2\15\1\306\24\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\2\15\1\123\24\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\1\15"+
    "\1\307\25\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\24\15\1\310\2\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\5\15\1\311\21\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\12\15\1\312\14\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\2\15"+
    "\1\122\24\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\22\15\1\123\4\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\5\15\1\214\21\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\6\15\1\261\20\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\3\15"+
    "\1\313\23\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\5\15\1\261\21\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\10\15\1\314\16\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\5\15\1\315\21\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\15\15"+
    "\1\122\11\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\13\15\1\316\13\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\1\15\1\214\25\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\14\15\1\317\12\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\10\15"+
    "\1\122\16\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\7\15\1\320\17\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\15\15\1\321\11\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\13\15\1\322\13\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\7\15"+
    "\1\323\17\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\13\15\1\324\13\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\12\15\1\325\14\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\7\15\1\326\17\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\1\327"+
    "\26\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\4\15\1\261\22\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\22\15\1\315\4\15\12\0\1\15\7\0"+
    "\6\15\1\0\1\15\4\0\11\15\1\261\15\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\2\15\1\330"+
    "\24\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\3\15\1\271\23\15\12\0\1\15\7\0\6\15\1\0"+
    "\1\15\4\0\1\261\26\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\23\15\1\261\3\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\3\15\1\331\23\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\11\15"+
    "\1\213\15\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\7\15\1\332\17\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\13\15\1\333\13\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\15\15\1\334\11\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\2\15"+
    "\1\241\24\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\13\15\1\335\13\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\15\15\1\315\11\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\22\15\1\336\4\15"+
    "\12\0\1\15\7\0\6\15\1\0\1\15\4\0\22\15"+
    "\1\261\4\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\3\15\1\337\23\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\3\15\1\340\23\15\12\0\1\15"+
    "\7\0\6\15\1\0\1\15\4\0\1\266\26\15\12\0"+
    "\1\15\7\0\6\15\1\0\1\15\4\0\1\15\1\341"+
    "\25\15\12\0\1\15\7\0\6\15\1\0\1\15\4\0"+
    "\1\342\26\15\12\0\1\15\7\0\6\15\1\0\1\15"+
    "\4\0\3\15\1\343\23\15\12\0\1\15\7\0\6\15"+
    "\1\0\1\15\4\0\22\15\1\214\4\15\12\0\1\15";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10070];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\4\1\1\11\6\1\2\11\22\1\1\11"+
    "\1\1\4\11\2\1\2\11\2\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\0\1\1\2\0\2\1\1\11\45\1\1\11\1\0"+
    "\2\11\1\0\1\1\1\0\161\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public Lua5Lexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }

    private static final byte PAREN       = 1;
    private static final byte BRACKET     = 2;
    private static final byte BRACE       = 3;
    private static final byte ENDBLOCK    = 4;
    private static final byte REPEATBLOCK = 5;

	TokenType commentType;
    int       startLength;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lua5Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2628) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yychar = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { 
          }
        case 36: break;
        case 2: 
          { return token(TokenType.OPERATOR,  BRACKET);
          }
        case 37: break;
        case 3: 
          { return token(TokenType.OPERATOR);
          }
        case 38: break;
        case 4: 
          { return token(TokenType.OPERATOR, -BRACKET);
          }
        case 39: break;
        case 5: 
          { return token(TokenType.IDENTIFIER);
          }
        case 40: break;
        case 6: 
          { return token(TokenType.NUMBER);
          }
        case 41: break;
        case 7: 
          { yybegin(STRING1);
                        tokenStart = yychar;
                        tokenLength = 1;
          }
        case 42: break;
        case 8: 
          { yybegin(STRING2);
                        tokenStart = yychar; 
                        tokenLength = 1;
          }
        case 43: break;
        case 9: 
          { return token(TokenType.OPERATOR,  PAREN);
          }
        case 44: break;
        case 10: 
          { return token(TokenType.OPERATOR, -PAREN);
          }
        case 45: break;
        case 11: 
          { return token(TokenType.OPERATOR,  BRACE);
          }
        case 46: break;
        case 12: 
          { return token(TokenType.OPERATOR, -BRACE);
          }
        case 47: break;
        case 13: 
          { tokenLength += yylength();
          }
        case 48: break;
        case 14: 
          { yybegin(YYINITIAL);
          }
        case 49: break;
        case 15: 
          { yybegin(YYINITIAL);
                            return token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 50: break;
        case 16: 
          { yybegin(YYINITIAL); 
                            return token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 51: break;
        case 17: 
          { ++tokenLength;
          }
        case 52: break;
        case 18: 
          { yybegin(LINECOMMENT);
                            tokenLength += yylength();
          }
        case 53: break;
        case 19: 
          { yybegin(YYINITIAL);
                            return token(TokenType.COMMENT, tokenStart, tokenLength);
          }
        case 54: break;
        case 20: 
          { tokenLength++;
          }
        case 55: break;
        case 21: 
          { yybegin(YYINITIAL);
                            tokenLength += yylength();
                            return token(TokenType.COMMENT, tokenStart, tokenLength);
          }
        case 56: break;
        case 22: 
          { yybegin(BLOCKCOMMENT);
                        commentType = TokenType.COMMENT2;
                        tokenStart  = yychar;
                        tokenLength = yylength();
                        startLength = tokenLength;
          }
        case 57: break;
        case 23: 
          { yybegin(COMMENT);
                        tokenStart  = yychar;
                        tokenLength = yylength();
          }
        case 58: break;
        case 24: 
          { return token(TokenType.KEYWORD);
          }
        case 59: break;
        case 25: 
          { return token(TokenType.TYPE2);
          }
        case 60: break;
        case 26: 
          { return token(TokenType.KEYWORD,  ENDBLOCK);
          }
        case 61: break;
        case 27: 
          { tokenLength += 2;
          }
        case 62: break;
        case 28: 
          { if (startLength == yylength())
                            {
                                tokenLength += yylength();
                                yybegin(YYINITIAL);
                                return token(commentType, tokenStart, tokenLength);
                            }
                            else
                            {
                                tokenLength++;
                                yypushback(yylength() - 1);
                            }
          }
        case 63: break;
        case 29: 
          { yybegin(BLOCKCOMMENT);
                            commentType = TokenType.COMMENT2;
                            tokenLength += yylength();
                            startLength = yylength();
          }
        case 64: break;
        case 30: 
          { return token(TokenType.KEYWORD, -ENDBLOCK);
          }
        case 65: break;
        case 31: 
          { return token(TokenType.TYPE);
          }
        case 66: break;
        case 32: 
          { return token(TokenType.KEYWORD2);
          }
        case 67: break;
        case 33: 
          { return token(TokenType.KEYWORD, -REPEATBLOCK);
          }
        case 68: break;
        case 34: 
          { return token(TokenType.KEYWORD,  REPEATBLOCK);
          }
        case 69: break;
        case 35: 
          { return token(TokenType.TYPE3);
          }
        case 70: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING1: {
              yybegin(YYINITIAL);
                            return token(TokenType.STRING, tokenStart, tokenLength);
            }
            case 228: break;
            case STRING2: {
              yybegin(YYINITIAL);
                            return token(TokenType.STRING, tokenStart, tokenLength);
            }
            case 229: break;
            case BLOCKCOMMENT: {
              yybegin(YYINITIAL);
                            return token(commentType, tokenStart, tokenLength);
            }
            case 230: break;
            case COMMENT: {
              yybegin(YYINITIAL);
                            return token(TokenType.COMMENT, tokenStart, tokenLength);
            }
            case 231: break;
            case LINECOMMENT: {
              yybegin(YYINITIAL);
                            return token(TokenType.COMMENT, tokenStart, tokenLength);
            }
            case 232: break;
            default:
              {
                return null;
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }
}

